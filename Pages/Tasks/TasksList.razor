@inject ITasksRepository _tasksService
@inject IJSRuntime _js;

@if(!TaskItems.Any())
{
  <div class="d-flex justify-content-center">
    No records to show
</div>
}
else
{
<div class="table-responsive">
  <table class="table table-striped table-hovered">
  <tbody>
    @foreach (TaskModel task in TaskItems)
    {
        <tr>
          <td style="width:20px">
            @if(!task.IsCompleted)
            {
              <a @onclick="(()=>UpdateTaskStatus(task, true))" title="Mark complete" class="text-success"><span class="oi oi-check" aria-hidden="true"></span></a>
            }
            else{
              <a @onclick="(()=>UpdateTaskStatus(task, false))" title="Mark imcomplete" class="text-info"><span class="oi oi-action-undo" aria-hidden="true"></span></a>
            }
          </td>
          <td class='@(task.IsCompleted ? "completed-task" : "")'>@task.Title
            @if(!string.IsNullOrWhiteSpace(task.Description)){
                <small class="form-text text-muted">@task.Description</small>
            }
            else{
               <small class="form-text text-muted">&nbsp;</small>
            }
          </td>
          <td style="width:150px" class='@(task.IsCompleted ? "completed-task" : "")'>
            @if(task.DueDate.HasValue){
              <span class="oi oi-calendar" aria-hidden="true"></span> @task.DueDate.Value.ToString("dd-MM-yyyy")
            }
          </td>
          <td style="width:40px">
            @if(!task.IsCompleted)
            {
              <a href="/mytasks/edit/@task.TaskId" title="Edit" class="text-primary"><span class="oi oi-pencil" aria-hidden="true"></span></a>
            }
              <a href="javascript:;" @onclick="(()=>DeleteTask(task))" title="Remove" class="text-danger"><span class="oi oi-delete" aria-hidden="true"></span></a>
          </td>
        </tr>
    }    
  </tbody>
</table>
</div>
}
@code{
      [Parameter] public IEnumerable<TaskModel> TaskItems { get; set; }
      [Parameter] public EventCallback OnRefreshRequested { get; set; }

      private async Task RequestRefresh()
      {
          if (OnRefreshRequested.HasDelegate)
              await OnRefreshRequested.InvokeAsync(null);
      }

      public async Task UpdateTaskStatus(TaskModel task, bool completed)
      {
          task.IsCompleted = completed;
          _tasksService.UpdateTask(task);
          await RequestRefresh();
      }

      public async Task DeleteTask(TaskModel task)
      {
          TaskIdToDelete = task.TaskId;
          await _js.InvokeVoidAsync("showConfirmDialog", "Are you sure?", "DeleteTaskConfirmed", DotNetObjectReference.Create(this));
      }

      private string TaskIdToDelete{ get; set; }

      [JSInvokable]
      public async Task DeleteTaskConfirmed(){
          _tasksService.DeleteTask(TaskIdToDelete);
          await RequestRefresh();
      }

}